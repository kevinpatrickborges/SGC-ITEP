<div class="container-fluid">
  <!-- Header do Projeto -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-start">
        <div class="d-flex align-items-center">
          <a href="/projetos" class="btn btn-outline-secondary me-3">
            <i class="fas fa-arrow-left"></i>
          </a>
          <div>
            <h1 class="h3 mb-1" style="color: <%= projeto.cor || '#007bff' %>">
              <i class="fas fa-project-diagram me-2"></i>
              <%= projeto.nome %>
            </h1>
            <div class="d-flex align-items-center gap-3">
              <span class="badge bg-<%= 
                projeto.status === 'concluido' ? 'success' : 
                projeto.status === 'em_andamento' ? 'primary' : 
                projeto.status === 'pausado' ? 'warning' : 
                projeto.status === 'cancelado' ? 'danger' : 'secondary' 
              %>">
                <%= 
                  projeto.status === 'planejamento' ? 'Planejamento' :
                  projeto.status === 'em_andamento' ? 'Em Andamento' :
                  projeto.status === 'pausado' ? 'Pausado' :
                  projeto.status === 'concluido' ? 'Concluído' :
                  projeto.status === 'cancelado' ? 'Cancelado' : projeto.status
                %>
              </span>
              <span class="badge bg-<%= 
                projeto.prioridade === 'critica' ? 'danger' : 
                projeto.prioridade === 'alta' ? 'warning' : 
                projeto.prioridade === 'media' ? 'info' : 'secondary' 
              %>">
                <%= 
                  projeto.prioridade === 'baixa' ? 'Baixa' :
                  projeto.prioridade === 'media' ? 'Média' :
                  projeto.prioridade === 'alta' ? 'Alta' :
                  projeto.prioridade === 'critica' ? 'Crítica' : projeto.prioridade
                %>
              </span>
              <small class="text-muted">
                Progresso: <%= projeto.progresso %>%
              </small>
            </div>
          </div>
        </div>
        
        <div class="d-flex gap-2">
          <% if (user.role === 'admin' || projeto.membros.some(m => m.usuario.id === user.id && ['admin', 'gerente'].includes(m.papel))) { %>
            <a href="/projetos/<%= projeto.id %>/edit" class="btn btn-outline-primary">
              <i class="fas fa-edit me-1"></i>
              Editar
            </a>
          <% } %>
          <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalNovaTarefa">
            <i class="fas fa-plus me-1"></i>
            Nova Tarefa
          </button>
        </div>
      </div>
      
      <% if (projeto.descricao) { %>
        <p class="text-muted mt-3 mb-0"><%= projeto.descricao %></p>
      <% } %>
    </div>
  </div>
  
  <!-- Informações do Projeto -->
  <div class="row mb-4">
    <div class="col-md-8">
      <div class="card">
        <div class="card-body">
          <div class="row g-3">
            <div class="col-md-3">
              <small class="text-muted d-block">Responsável</small>
              <% if (projeto.responsavelProjeto) { %>
                <div class="d-flex align-items-center">
                  <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                    <%= projeto.responsavelProjeto.nome.charAt(0).toUpperCase() %>
                  </div>
                  <span><%= projeto.responsavelProjeto.nome %></span>
                </div>
              <% } else { %>
                <span class="text-muted">Não definido</span>
              <% } %>
            </div>
            
            <% if (projeto.dataInicio) { %>
              <div class="col-md-3">
                <small class="text-muted d-block">Data de Início</small>
                <span><%= new Date(projeto.dataInicio).toLocaleDateString('pt-BR') %></span>
              </div>
            <% } %>
            
            <% if (projeto.dataFim) { %>
              <div class="col-md-3">
                <small class="text-muted d-block">Data de Fim</small>
                <span><%= new Date(projeto.dataFim).toLocaleDateString('pt-BR') %></span>
              </div>
            <% } %>
            
            <div class="col-md-3">
              <small class="text-muted d-block">Criado em</small>
              <span><%= new Date(projeto.createdAt).toLocaleDateString('pt-BR') %></span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card">
        <div class="card-body">
          <h6 class="card-title">Equipe (<%= projeto.membros ? projeto.membros.length : 0 %>)</h6>
          <% if (projeto.membros && projeto.membros.length > 0) { %>
            <div class="d-flex flex-wrap gap-2">
              <% projeto.membros.forEach(membro => { %>
                <div class="d-flex align-items-center bg-light rounded px-2 py-1">
                  <div class="avatar-xs bg-secondary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                    <%= membro.usuario.nome.charAt(0).toUpperCase() %>
                  </div>
                  <small>
                    <%= membro.usuario.nome %>
                    <span class="text-muted">(<%= membro.papel %>)</span>
                  </small>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <p class="text-muted mb-0">Nenhum membro adicionado</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Quadro Kanban -->
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="fas fa-columns me-2"></i>
            Quadro Kanban
          </h5>
        </div>
        <div class="card-body p-0">
          <div class="kanban-board" id="kanbanBoard">
            <% if (projeto.quadros && projeto.quadros.length > 0) { %>
              <% const quadro = projeto.quadros[0]; %>
              <% if (quadro.listas && quadro.listas.length > 0) { %>
                <% quadro.listas.forEach(lista => { %>
                  <div class="kanban-column" data-lista-id="<%= lista.id %>">
                    <div class="kanban-column-header" style="background-color: <%= lista.cor || '#6c757d' %>">
                      <h6 class="mb-0 text-white">
                        <%= lista.nome %>
                        <span class="badge bg-light text-dark ms-2">
                          <%= lista.tarefas ? lista.tarefas.length : 0 %>
                        </span>
                      </h6>
                    </div>
                    
                    <div class="kanban-column-body" data-lista-id="<%= lista.id %>">
                      <% if (lista.tarefas && lista.tarefas.length > 0) { %>
                        <% lista.tarefas.forEach(tarefa => { %>
                          <div class="kanban-card" data-tarefa-id="<%= tarefa.id %>" draggable="true">
                            <div class="card mb-3">
                              <div class="card-body p-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                  <h6 class="card-title mb-0 flex-grow-1" title="<%= tarefa.titulo %>">
                                    <%= tarefa.titulo %>
                                  </h6>
                                  <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary" type="button" 
                                            data-bs-toggle="dropdown" aria-expanded="false">
                                      <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                      <li>
                                        <button class="dropdown-item" onclick="editarTarefa('<%= tarefa.id %>')">
                                          <i class="fas fa-edit me-2"></i>Editar
                                        </button>
                                      </li>
                                      <li>
                                        <button class="dropdown-item text-danger" onclick="excluirTarefa('<%= tarefa.id %>')">
                                          <i class="fas fa-trash me-2"></i>Excluir
                                        </button>
                                      </li>
                                    </ul>
                                  </div>
                                </div>
                                
                                <% if (tarefa.descricao) { %>
                                  <p class="card-text small text-muted mb-2">
                                    <%= tarefa.descricao.length > 80 ? tarefa.descricao.substring(0, 80) + '...' : tarefa.descricao %>
                                  </p>
                                <% } %>
                                
                                <div class="d-flex justify-content-between align-items-center">
                                  <div class="d-flex gap-1">
                                    <span class="badge bg-<%= 
                                      tarefa.prioridade === 'critica' ? 'danger' : 
                                      tarefa.prioridade === 'alta' ? 'warning' : 
                                      tarefa.prioridade === 'media' ? 'info' : 'secondary' 
                                    %> badge-sm">
                                      <%= 
                                        tarefa.prioridade === 'baixa' ? 'Baixa' :
                                        tarefa.prioridade === 'media' ? 'Média' :
                                        tarefa.prioridade === 'alta' ? 'Alta' :
                                        tarefa.prioridade === 'critica' ? 'Crítica' : tarefa.prioridade
                                      %>
                                    </span>
                                    
                                    <% if (tarefa.etiquetas && tarefa.etiquetas.length > 0) { %>
                                      <% tarefa.etiquetas.slice(0, 2).forEach(etiqueta => { %>
                                        <span class="badge bg-secondary badge-sm"><%= etiqueta %></span>
                                      <% }); %>
                                      <% if (tarefa.etiquetas.length > 2) { %>
                                        <span class="badge bg-light text-dark badge-sm">+<%= tarefa.etiquetas.length - 2 %></span>
                                      <% } %>
                                    <% } %>
                                  </div>
                                  
                                  <% if (tarefa.responsavelTarefa) { %>
                                    <div class="avatar-xs bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" 
                                         title="<%= tarefa.responsavelTarefa.nome %>">
                                      <%= tarefa.responsavelTarefa.nome.charAt(0).toUpperCase() %>
                                    </div>
                                  <% } %>
                                </div>
                                
                                <% if (tarefa.dataVencimento) { %>
                                  <div class="mt-2">
                                    <small class="text-muted">
                                      <i class="fas fa-calendar me-1"></i>
                                      <%= new Date(tarefa.dataVencimento).toLocaleDateString('pt-BR') %>
                                    </small>
                                  </div>
                                <% } %>
                              </div>
                            </div>
                          </div>
                        <% }); %>
                      <% } %>
                      
                      <!-- Botão para adicionar tarefa na lista -->
                      <button class="btn btn-outline-primary btn-sm w-100 mt-2" 
                              onclick="abrirModalNovaTarefa('<%= lista.id %>')">
                        <i class="fas fa-plus me-1"></i>
                        Adicionar Tarefa
                      </button>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <div class="text-center py-5">
                  <i class="fas fa-columns fa-3x text-muted mb-3"></i>
                  <h5 class="text-muted">Nenhuma lista encontrada</h5>
                  <p class="text-muted">As listas padrão serão criadas automaticamente.</p>
                </div>
              <% } %>
            <% } else { %>
              <div class="text-center py-5">
                <i class="fas fa-columns fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">Quadro não encontrado</h5>
                <p class="text-muted">O quadro Kanban será criado automaticamente.</p>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal Nova Tarefa -->
<div class="modal fade" id="modalNovaTarefa" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Nova Tarefa</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="formNovaTarefa">
        <div class="modal-body">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <input type="hidden" name="projetoId" value="<%= projeto.id %>">
          <input type="hidden" name="listaId" id="listaIdNovaTarefa">
          
          <div class="row g-3">
            <div class="col-12">
              <label for="titulo" class="form-label">Título *</label>
              <input type="text" class="form-control" id="titulo" name="titulo" required>
            </div>
            
            <div class="col-12">
              <label for="descricao" class="form-label">Descrição</label>
              <textarea class="form-control" id="descricao" name="descricao" rows="3"></textarea>
            </div>
            
            <div class="col-md-6">
              <label for="responsavel" class="form-label">Responsável</label>
              <select class="form-select" id="responsavel" name="responsavel">
                <option value="">Selecione um responsável</option>
                <% if (projeto.membros) { %>
                  <% projeto.membros.forEach(membro => { %>
                    <option value="<%= membro.usuario.id %>"><%= membro.usuario.nome %></option>
                  <% }); %>
                <% } %>
              </select>
            </div>
            
            <div class="col-md-6">
              <label for="prioridade" class="form-label">Prioridade</label>
              <select class="form-select" id="prioridade" name="prioridade">
                <option value="baixa">Baixa</option>
                <option value="media" selected>Média</option>
                <option value="alta">Alta</option>
                <option value="critica">Crítica</option>
              </select>
            </div>
            
            <div class="col-md-6">
              <label for="dataVencimento" class="form-label">Data de Vencimento</label>
              <input type="date" class="form-control" id="dataVencimento" name="dataVencimento">
            </div>
            
            <div class="col-md-6">
              <label for="estimativaHoras" class="form-label">Estimativa (horas)</label>
              <input type="number" class="form-control" id="estimativaHoras" name="estimativaHoras" step="0.5" min="0">
            </div>
            
            <div class="col-12">
              <label for="etiquetas" class="form-label">Etiquetas</label>
              <input type="text" class="form-control" id="etiquetas" name="etiquetas" 
                     placeholder="Digite as etiquetas separadas por vírgula">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-1"></i>
            Criar Tarefa
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal Editar Tarefa -->
<div class="modal fade" id="modalEditarTarefa" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Editar Tarefa</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="formEditarTarefa">
        <div class="modal-body">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <input type="hidden" id="editTarefaId" name="tarefaId">
          
          <div class="row g-3">
            <div class="col-12">
              <label for="editTitulo" class="form-label">Título *</label>
              <input type="text" class="form-control" id="editTitulo" name="titulo" required>
            </div>
            
            <div class="col-12">
              <label for="editDescricao" class="form-label">Descrição</label>
              <textarea class="form-control" id="editDescricao" name="descricao" rows="3"></textarea>
            </div>
            
            <div class="col-md-6">
              <label for="editResponsavel" class="form-label">Responsável</label>
              <select class="form-select" id="editResponsavel" name="responsavel">
                <option value="">Selecione um responsável</option>
                <% if (projeto.membros) { %>
                  <% projeto.membros.forEach(membro => { %>
                    <option value="<%= membro.usuario.id %>"><%= membro.usuario.nome %></option>
                  <% }); %>
                <% } %>
              </select>
            </div>
            
            <div class="col-md-6">
              <label for="editStatus" class="form-label">Status</label>
              <select class="form-select" id="editStatus" name="status">
                <option value="pendente">Pendente</option>
                <option value="em_andamento">Em Andamento</option>
                <option value="concluida">Concluída</option>
                <option value="cancelada">Cancelada</option>
              </select>
            </div>
            
            <div class="col-md-6">
              <label for="editPrioridade" class="form-label">Prioridade</label>
              <select class="form-select" id="editPrioridade" name="prioridade">
                <option value="baixa">Baixa</option>
                <option value="media">Média</option>
                <option value="alta">Alta</option>
                <option value="critica">Crítica</option>
              </select>
            </div>
            
            <div class="col-md-6">
              <label for="editProgresso" class="form-label">Progresso (%)</label>
              <input type="number" class="form-control" id="editProgresso" name="progresso" min="0" max="100">
            </div>
            
            <div class="col-md-6">
              <label for="editDataVencimento" class="form-label">Data de Vencimento</label>
              <input type="date" class="form-control" id="editDataVencimento" name="dataVencimento">
            </div>
            
            <div class="col-md-6">
              <label for="editEstimativaHoras" class="form-label">Estimativa (horas)</label>
              <input type="number" class="form-control" id="editEstimativaHoras" name="estimativaHoras" step="0.5" min="0">
            </div>
            
            <div class="col-12">
              <label for="editEtiquetas" class="form-label">Etiquetas</label>
              <input type="text" class="form-control" id="editEtiquetas" name="etiquetas" 
                     placeholder="Digite as etiquetas separadas por vírgula">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-1"></i>
            Salvar Alterações
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
.avatar-sm {
  width: 32px;
  height: 32px;
  font-size: 12px;
  font-weight: 600;
}

.avatar-xs {
  width: 24px;
  height: 24px;
  font-size: 10px;
  font-weight: 600;
}

.badge-sm {
  font-size: 0.7em;
}

.kanban-board {
  display: flex;
  gap: 1rem;
  padding: 1rem;
  overflow-x: auto;
  min-height: 500px;
}

.kanban-column {
  min-width: 300px;
  max-width: 300px;
  background-color: #f8f9fa;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
}

.kanban-column-header {
  padding: 1rem;
  border-radius: 8px 8px 0 0;
  text-align: center;
}

.kanban-column-body {
  padding: 1rem;
  flex-grow: 1;
  min-height: 400px;
}

.kanban-card {
  cursor: move;
  transition: transform 0.2s;
}

.kanban-card:hover {
  transform: translateY(-2px);
}

.kanban-card.dragging {
  opacity: 0.5;
  transform: rotate(5deg);
}

.kanban-column-body.drag-over {
  background-color: #e3f2fd;
  border: 2px dashed #2196f3;
  border-radius: 8px;
}
</style>

<script>
// Variáveis globais
const projetoId = '<%= projeto.id %>';
let draggedElement = null;

// Inicialização
document.addEventListener('DOMContentLoaded', function() {
  initializeDragAndDrop();
  initializeFormHandlers();
});

// Drag and Drop
function initializeDragAndDrop() {
  const cards = document.querySelectorAll('.kanban-card');
  const columns = document.querySelectorAll('.kanban-column-body');
  
  cards.forEach(card => {
    card.addEventListener('dragstart', handleDragStart);
    card.addEventListener('dragend', handleDragEnd);
  });
  
  columns.forEach(column => {
    column.addEventListener('dragover', handleDragOver);
    column.addEventListener('drop', handleDrop);
    column.addEventListener('dragenter', handleDragEnter);
    column.addEventListener('dragleave', handleDragLeave);
  });
}

function handleDragStart(e) {
  draggedElement = this;
  this.classList.add('dragging');
  e.dataTransfer.effectAllowed = 'move';
  e.dataTransfer.setData('text/html', this.outerHTML);
}

function handleDragEnd(e) {
  this.classList.remove('dragging');
  draggedElement = null;
}

function handleDragOver(e) {
  if (e.preventDefault) {
    e.preventDefault();
  }
  e.dataTransfer.dropEffect = 'move';
  return false;
}

function handleDragEnter(e) {
  this.classList.add('drag-over');
}

function handleDragLeave(e) {
  this.classList.remove('drag-over');
}

function handleDrop(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  
  this.classList.remove('drag-over');
  
  if (draggedElement !== null) {
    const tarefaId = draggedElement.dataset.tarefaId;
    const novaListaId = this.dataset.listaId;
    const cards = Array.from(this.querySelectorAll('.kanban-card'));
    const novaOrdem = cards.length + 1;
    
    // Mover visualmente
    this.appendChild(draggedElement);
    
    // Atualizar no servidor
    moverTarefa(tarefaId, novaListaId, novaOrdem);
  }
  
  return false;
}

// Funções da API
async function moverTarefa(tarefaId, listaId, ordem) {
  try {
    const response = await fetch(`/projetos/tarefas/${tarefaId}/move`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': '<%= csrfToken %>'
      },
      body: JSON.stringify({ listaId, ordem })
    });
    
    if (!response.ok) {
      throw new Error('Erro ao mover tarefa');
    }
    
    // Recarregar a página para atualizar os contadores
    setTimeout(() => {
      window.location.reload();
    }, 500);
  } catch (error) {
    console.error('Erro ao mover tarefa:', error);
    alert('Erro ao mover tarefa. Recarregando a página...');
    window.location.reload();
  }
}

// Formulários
function initializeFormHandlers() {
  const formNovaTarefa = document.getElementById('formNovaTarefa');
  const formEditarTarefa = document.getElementById('formEditarTarefa');
  
  // Form Nova Tarefa
  formNovaTarefa.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    // Processar etiquetas
    if (data.etiquetas) {
      data.etiquetas = data.etiquetas.split(',').map(tag => tag.trim()).filter(tag => tag);
    }
    
    try {
      const response = await fetch(`/projetos/${projetoId}/tarefas`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': '<%= csrfToken %>'
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        const modal = bootstrap.Modal.getInstance(document.getElementById('modalNovaTarefa'));
        modal.hide();
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Erro ao criar tarefa: ' + (error.error || 'Erro desconhecido'));
      }
    } catch (error) {
      console.error('Erro ao criar tarefa:', error);
      alert('Erro ao criar tarefa. Tente novamente.');
    }
  });
  
  // Form Editar Tarefa
  formEditarTarefa.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    const tarefaId = data.tarefaId;
    
    // Processar etiquetas
    if (data.etiquetas) {
      data.etiquetas = data.etiquetas.split(',').map(tag => tag.trim()).filter(tag => tag);
    }
    
    // Remover tarefaId dos dados enviados
    delete data.tarefaId;
    delete data._token;
    
    try {
      const response = await fetch(`/projetos/tarefas/${tarefaId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': '<%= csrfToken %>'
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        const modal = bootstrap.Modal.getInstance(document.getElementById('modalEditarTarefa'));
        modal.hide();
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Erro ao atualizar tarefa: ' + (error.error || 'Erro desconhecido'));
      }
    } catch (error) {
      console.error('Erro ao atualizar tarefa:', error);
      alert('Erro ao atualizar tarefa. Tente novamente.');
    }
  });
}

// Funções auxiliares
function abrirModalNovaTarefa(listaId) {
  document.getElementById('listaIdNovaTarefa').value = listaId || '';
  const modal = new bootstrap.Modal(document.getElementById('modalNovaTarefa'));
  modal.show();
}

async function editarTarefa(tarefaId) {
  try {
    // Buscar dados da tarefa
    const response = await fetch(`/projetos/tarefas/${tarefaId}`, {
      method: 'GET',
      headers: {
        'X-CSRF-Token': '<%= csrfToken %>'
      }
    });
    
    if (response.ok) {
      const tarefa = await response.json();
      
      // Preencher formulário
      document.getElementById('editTarefaId').value = tarefa.id;
      document.getElementById('editTitulo').value = tarefa.titulo || '';
      document.getElementById('editDescricao').value = tarefa.descricao || '';
      document.getElementById('editResponsavel').value = tarefa.responsavel || '';
      document.getElementById('editStatus').value = tarefa.status || 'pendente';
      document.getElementById('editPrioridade').value = tarefa.prioridade || 'media';
      document.getElementById('editProgresso').value = tarefa.progresso || 0;
      
      // Formatar data para input date
      if (tarefa.dataVencimento) {
        const data = new Date(tarefa.dataVencimento);
        const dataFormatada = data.toISOString().split('T')[0];
        document.getElementById('editDataVencimento').value = dataFormatada;
      } else {
        document.getElementById('editDataVencimento').value = '';
      }
      
      document.getElementById('editEstimativaHoras').value = tarefa.estimativaHoras || '';
      
      // Processar etiquetas
      if (tarefa.etiquetas && Array.isArray(tarefa.etiquetas)) {
        document.getElementById('editEtiquetas').value = tarefa.etiquetas.join(', ');
      } else {
        document.getElementById('editEtiquetas').value = '';
      }
      
      // Abrir modal
      const modal = new bootstrap.Modal(document.getElementById('modalEditarTarefa'));
      modal.show();
    } else {
      const error = await response.json();
      alert('Erro ao carregar tarefa: ' + (error.error || 'Erro desconhecido'));
    }
  } catch (error) {
    console.error('Erro ao carregar tarefa:', error);
    alert('Erro ao carregar tarefa. Tente novamente.');
  }
}

async function excluirTarefa(tarefaId) {
  if (confirm('Tem certeza que deseja excluir esta tarefa?')) {
    try {
      const response = await fetch(`/projetos/tarefas/${tarefaId}`, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': '<%= csrfToken %>'
        }
      });
      
      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Erro ao excluir tarefa: ' + (error.error || 'Erro desconhecido'));
      }
    } catch (error) {
      console.error('Erro ao excluir tarefa:', error);
      alert('Erro ao excluir tarefa. Tente novamente.');
    }
  }
}
</script>