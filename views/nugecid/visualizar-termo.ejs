<div class="container-fluid">
  <div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800"><%= title %></h1>
    <div>
      <a href="/nugecid" class="btn btn-secondary btn-sm btn-icon-split me-2">
        <span class="icon text-white-50"><i class="fas fa-arrow-left"></i></span>
        <span class="text">Voltar</span>
      </a>
      <button id="toggleEditMode" onclick="toggleEditMode()" class="btn btn-warning btn-sm btn-icon-split me-2">
        <span class="icon text-white-50"><i class="fas fa-edit"></i></span>
        <span class="text">Editar</span>
      </button>
      <div class="btn-group me-2" role="group">
        <button onclick="printDocument()" class="btn btn-info btn-sm">
          <i class="fas fa-print"></i> Imprimir
        </button>
        <button type="button" class="btn btn-info btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
          <span class="visually-hidden">Toggle Dropdown</span>
        </button>
        <ul class="dropdown-menu">
          <li><a class="dropdown-item" href="#" onclick="printDocument()"><i class="fas fa-external-link-alt me-2"></i>Nova Janela</a></li>
          <li><a class="dropdown-item" href="#" onclick="printAlternative()"><i class="fas fa-print me-2"></i>Impressão Direta</a></li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item" href="#" onclick="window.print()"><i class="fas fa-keyboard me-2"></i>Ctrl+P (Página Atual)</a></li>
        </ul>
      </div>
      <button id="saveEditedDocument" onclick="saveEditedDocument()" class="btn btn-primary btn-sm btn-icon-split me-2" style="display: none;">
        <span class="icon text-white-50"><i class="fas fa-save"></i></span>
        <span class="text">Salvar Edição</span>
      </button>
      <form action="/nugecid/termo/baixar-docx" method="POST" class="d-inline">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <button type="submit" class="btn btn-success btn-sm btn-icon-split">
          <span class="icon text-white-50"><i class="fas fa-file-word"></i></span>
          <span class="text">Salvar como DOCX</span>
        </button>
      </form>
    </div>
  </div>

  <div class="card shadow mb-4">
    <div class="card-body">
      <!-- Modo de Visualização -->
      <div id="documento-preview" style="background: white; padding: 40px; border: 1px solid #ddd; border-radius: 5px;">
        <%- htmlContent %>
      </div>
      
      <!-- Modo de Edição -->
      <div id="documento-editor" style="display: none; background: white; border: 1px solid #ddd; border-radius: 5px;">
        <div id="editor-toolbar" style="border-bottom: 1px solid #ddd; padding: 10px;">
          <!-- Toolbar do Quill será inserido aqui -->
        </div>
        <div id="editor-container" style="min-height: 400px; padding: 20px;">
          <!-- Conteúdo editável será inserido aqui -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Quill.js CSS e JS -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

<script>
let quill;
let isEditMode = false;
let originalContent = '';

// Inicializar o editor Quill quando a página carregar
document.addEventListener('DOMContentLoaded', function() {
  // Salvar conteúdo original
  originalContent = document.getElementById('documento-preview').innerHTML;
  
  // Configurar Quill
  quill = new Quill('#documento-editor', {
    theme: 'snow',
    modules: {
      toolbar: [
        [{ 'header': [1, 2, 3, false] }],
        ['bold', 'italic', 'underline', 'strike'],
        [{ 'color': [] }, { 'background': [] }],
        [{ 'font': [] }],
        [{ 'align': [] }],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],
        ['link', 'image'],
        ['clean']
      ]
    },
    placeholder: 'Edite o conteúdo do documento aqui...'
  });
});

function toggleEditMode() {
  const previewDiv = document.getElementById('documento-preview');
  const editorDiv = document.getElementById('documento-editor');
  const toggleBtn = document.getElementById('toggleEditMode');
  const saveBtn = document.getElementById('saveEditedDocument');
  
  if (!isEditMode) {
    // Entrar no modo de edição
    previewDiv.style.display = 'none';
    editorDiv.style.display = 'block';
    
    // Carregar conteúdo no editor
    const currentContent = previewDiv.innerHTML;
    quill.root.innerHTML = currentContent;
    
    // Atualizar botões
    toggleBtn.innerHTML = '<span class="icon text-white-50"><i class="fas fa-eye"></i></span><span class="text">Visualizar</span>';
    toggleBtn.className = 'btn btn-secondary btn-sm btn-icon-split me-2';
    saveBtn.style.display = 'inline-block';
    
    isEditMode = true;
  } else {
    // Voltar ao modo de visualização
    editorDiv.style.display = 'none';
    previewDiv.style.display = 'block';
    
    // Atualizar botões
    toggleBtn.innerHTML = '<span class="icon text-white-50"><i class="fas fa-edit"></i></span><span class="text">Editar</span>';
    toggleBtn.className = 'btn btn-warning btn-sm btn-icon-split me-2';
    saveBtn.style.display = 'none';
    
    isEditMode = false;
  }
}

function saveEditedDocument() {
  if (!quill) {
    alert('Editor não inicializado');
    return;
  }
  
  // Obter conteúdo editado
  const editedContent = quill.root.innerHTML;
  
  // Atualizar o preview com o conteúdo editado
  document.getElementById('documento-preview').innerHTML = editedContent;
  
  // Voltar ao modo de visualização
  toggleEditMode();
  
  // Enviar conteúdo editado para o servidor
  fetch('/nugecid/termo/salvar-edicao', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= csrfToken %>'
    },
    body: JSON.stringify({
      editedContent: editedContent,
      _csrf: '<%= csrfToken %>'
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Mostrar mensagem de sucesso
      showToast('Documento editado com sucesso!', 'success');
    } else {
      showToast('Erro ao salvar edição: ' + (data.message || 'Erro desconhecido'), 'error');
    }
  })
  .catch(error => {
    console.error('Erro ao salvar edição:', error);
    showToast('Erro ao salvar edição', 'error');
  });
}

function showToast(message, type) {
  // Criar toast simples
  const toast = document.createElement('div');
  toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
  toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  toast.innerHTML = `
    <strong>${type === 'success' ? 'Sucesso!' : 'Erro!'}</strong> ${message}
    <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
  `;
  
  document.body.appendChild(toast);
  
  // Remover automaticamente após 5 segundos
  setTimeout(() => {
    if (toast.parentElement) {
      toast.remove();
    }
  }, 5000);
}

function printDocument() {
  try {
    const content = isEditMode ? quill.root.innerHTML : document.getElementById('documento-preview').innerHTML;
    
    // Verificar se o conteúdo existe
    if (!content || content.trim() === '') {
      showToast('Não há conteúdo para imprimir', 'error');
      return;
    }
    
    // Tentar abrir nova janela
    const printWindow = window.open('', '_blank', 'width=800,height=600');
    
    // Verificar se a janela foi aberta (pode ser bloqueada por pop-up blocker)
    if (!printWindow) {
      showToast('Pop-ups bloqueados. Por favor, permita pop-ups para este site e tente novamente.', 'error');
      return;
    }
    
    // Escrever conteúdo na nova janela
    printWindow.document.write(`
      <html>
        <head>
          <title>Termo de Desarquivamento</title>
          <meta charset="UTF-8">
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              line-height: 1.6;
              color: #000;
            }
            table { 
              border-collapse: collapse; 
              width: 100%; 
              margin: 20px 0;
            }
            th, td { 
              border: 1px solid #000; 
              padding: 8px; 
              text-align: left; 
            }
            th { 
              background-color: #f2f2f2; 
            }
            h1, h2, h3 {
              text-align: center;
              margin-bottom: 20px;
              color: #000;
            }
            p {
              margin: 10px 0;
            }
            @media print {
              body { margin: 0; }
              @page { margin: 2cm; }
            }
          </style>
        </head>
        <body>
          ${content}
          <script>
            window.onload = function() {
              setTimeout(function() {
                window.print();
              }, 500);
            };
          </script>
        </body>
      </html>
    `);
    
    printWindow.document.close();
    
    // Feedback visual
    showToast('Janela de impressão aberta', 'success');
    
  } catch (error) {
    console.error('Erro ao imprimir documento:', error);
    showToast('Erro ao abrir janela de impressão. Tentando método alternativo...', 'error');
    
    // Método alternativo: impressão direta da página atual
    setTimeout(() => {
      printAlternative();
    }, 1000);
  }
}

function printAlternative() {
  try {
    // Salvar estado atual da página
    const originalContent = document.body.innerHTML;
    const content = isEditMode ? quill.root.innerHTML : document.getElementById('documento-preview').innerHTML;
    
    // Criar conteúdo temporário para impressão
    const printContent = `
      <div style="font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; color: #000;">
        ${content}
      </div>
    `;
    
    // Substituir conteúdo da página temporariamente
    document.body.innerHTML = printContent;
    
    // Imprimir
    window.print();
    
    // Restaurar conteúdo original
    document.body.innerHTML = originalContent;
    
    // Recarregar scripts necessários
    location.reload();
    
  } catch (error) {
    console.error('Erro no método alternativo de impressão:', error);
    showToast('Erro ao imprimir documento. Tente usar Ctrl+P manualmente.', 'error');
  }
}
</script>

<style>
  .document-preview {
    background-color: #fff;
    padding: 2rem;
    border: 1px solid #e3e6f0;
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
    max-width: 8.5in; /* Largura de uma página A4 */
    margin: auto;
  }
  @media print {
    body * {
      visibility: hidden;
    }
    #editor, #editor * {
      visibility: visible;
    }
    #editor {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      border: none;
      box-shadow: none;
      padding: 0;
    }
  }
</style>
